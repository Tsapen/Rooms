// Code generated by protoc-gen-go. DO NOT EDIT.
// source: rooms.proto

/*
Package main is a generated protocol buffer package.

It is generated from these files:
	rooms.proto

It has these top-level messages:
	Session
	Mess
	Nothing
*/
package main

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type Session struct {
	Login string `protobuf:"bytes,1,opt,name=login" json:"login,omitempty"`
	Room  string `protobuf:"bytes,2,opt,name=room" json:"room,omitempty"`
}

func (m *Session) Reset()                    { *m = Session{} }
func (m *Session) String() string            { return proto.CompactTextString(m) }
func (*Session) ProtoMessage()               {}
func (*Session) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *Session) GetLogin() string {
	if m != nil {
		return m.Login
	}
	return ""
}

func (m *Session) GetRoom() string {
	if m != nil {
		return m.Room
	}
	return ""
}

type Mess struct {
	Mess string `protobuf:"bytes,1,opt,name=mess" json:"mess,omitempty"`
}

func (m *Mess) Reset()                    { *m = Mess{} }
func (m *Mess) String() string            { return proto.CompactTextString(m) }
func (*Mess) ProtoMessage()               {}
func (*Mess) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *Mess) GetMess() string {
	if m != nil {
		return m.Mess
	}
	return ""
}

type Nothing struct {
	Dummy bool `protobuf:"varint,1,opt,name=dummy" json:"dummy,omitempty"`
}

func (m *Nothing) Reset()                    { *m = Nothing{} }
func (m *Nothing) String() string            { return proto.CompactTextString(m) }
func (*Nothing) ProtoMessage()               {}
func (*Nothing) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *Nothing) GetDummy() bool {
	if m != nil {
		return m.Dummy
	}
	return false
}

func init() {
	proto.RegisterType((*Session)(nil), "main.Session")
	proto.RegisterType((*Mess)(nil), "main.Mess")
	proto.RegisterType((*Nothing)(nil), "main.Nothing")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for RS service

type RSClient interface {
	Subscribe(ctx context.Context, in *Nothing, opts ...grpc.CallOption) (*Nothing, error)
	Publish(ctx context.Context, opts ...grpc.CallOption) (RS_PublishClient, error)
}

type rSClient struct {
	cc *grpc.ClientConn
}

func NewRSClient(cc *grpc.ClientConn) RSClient {
	return &rSClient{cc}
}

func (c *rSClient) Subscribe(ctx context.Context, in *Nothing, opts ...grpc.CallOption) (*Nothing, error) {
	out := new(Nothing)
	err := grpc.Invoke(ctx, "/main.RS/Subscribe", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rSClient) Publish(ctx context.Context, opts ...grpc.CallOption) (RS_PublishClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_RS_serviceDesc.Streams[0], c.cc, "/main.RS/Publish", opts...)
	if err != nil {
		return nil, err
	}
	x := &rSPublishClient{stream}
	return x, nil
}

type RS_PublishClient interface {
	Send(*Mess) error
	Recv() (*Mess, error)
	grpc.ClientStream
}

type rSPublishClient struct {
	grpc.ClientStream
}

func (x *rSPublishClient) Send(m *Mess) error {
	return x.ClientStream.SendMsg(m)
}

func (x *rSPublishClient) Recv() (*Mess, error) {
	m := new(Mess)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Server API for RS service

type RSServer interface {
	Subscribe(context.Context, *Nothing) (*Nothing, error)
	Publish(RS_PublishServer) error
}

func RegisterRSServer(s *grpc.Server, srv RSServer) {
	s.RegisterService(&_RS_serviceDesc, srv)
}

func _RS_Subscribe_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Nothing)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RSServer).Subscribe(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/main.RS/Subscribe",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RSServer).Subscribe(ctx, req.(*Nothing))
	}
	return interceptor(ctx, in, info, handler)
}

func _RS_Publish_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(RSServer).Publish(&rSPublishServer{stream})
}

type RS_PublishServer interface {
	Send(*Mess) error
	Recv() (*Mess, error)
	grpc.ServerStream
}

type rSPublishServer struct {
	grpc.ServerStream
}

func (x *rSPublishServer) Send(m *Mess) error {
	return x.ServerStream.SendMsg(m)
}

func (x *rSPublishServer) Recv() (*Mess, error) {
	m := new(Mess)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _RS_serviceDesc = grpc.ServiceDesc{
	ServiceName: "main.RS",
	HandlerType: (*RSServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Subscribe",
			Handler:    _RS_Subscribe_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Publish",
			Handler:       _RS_Publish_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "rooms.proto",
}

func init() { proto.RegisterFile("rooms.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 225 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x54, 0x90, 0x41, 0x4b, 0xc3, 0x40,
	0x10, 0x85, 0xbb, 0x25, 0x1a, 0x3b, 0x22, 0xc2, 0xe2, 0xa1, 0xc4, 0x83, 0xb2, 0x17, 0x0b, 0xc2,
	0x52, 0xec, 0x3f, 0xe8, 0xc5, 0x93, 0x12, 0x92, 0x9b, 0xb7, 0xa6, 0x5d, 0xd2, 0x81, 0xec, 0x4e,
	0xd8, 0xc9, 0x82, 0xfe, 0x7b, 0x99, 0x4d, 0x0f, 0x7a, 0xfb, 0xde, 0x3c, 0xde, 0xcc, 0xf0, 0xe0,
	0x36, 0x12, 0x79, 0xb6, 0x63, 0xa4, 0x89, 0x74, 0xe1, 0x0f, 0x18, 0xcc, 0x0e, 0xca, 0xd6, 0x31,
	0x23, 0x05, 0xfd, 0x00, 0x57, 0x03, 0xf5, 0x18, 0xd6, 0xea, 0x59, 0x6d, 0x56, 0xcd, 0x2c, 0xb4,
	0x86, 0x42, 0x52, 0xeb, 0x65, 0x1e, 0x66, 0x36, 0x15, 0x14, 0x1f, 0x8e, 0x59, 0x3c, 0xef, 0x98,
	0x2f, 0x81, 0xcc, 0xe6, 0x09, 0xca, 0x4f, 0x9a, 0xce, 0x18, 0x7a, 0x59, 0x78, 0x4a, 0xde, 0xff,
	0x64, 0xff, 0xa6, 0x99, 0xc5, 0xdb, 0x17, 0x2c, 0x9b, 0x56, 0xbf, 0xc2, 0xaa, 0x4d, 0x1d, 0x1f,
	0x23, 0x76, 0x4e, 0xdf, 0x59, 0xf9, 0xc5, 0x5e, 0x72, 0xd5, 0x7f, 0x69, 0x16, 0xfa, 0x05, 0xca,
	0x3a, 0x75, 0x03, 0xf2, 0x59, 0xc3, 0xec, 0xc9, 0xf9, 0xea, 0x0f, 0x9b, 0xc5, 0x46, 0x6d, 0xd5,
	0x7e, 0x0b, 0x8f, 0x48, 0xb6, 0x8f, 0xe3, 0xd1, 0xba, 0xef, 0x83, 0x1f, 0x07, 0xc7, 0x36, 0x52,
	0x9a, 0x5c, 0x9f, 0xf0, 0xe4, 0xf6, 0xf7, 0x8d, 0xf0, 0xbb, 0x70, 0x2d, 0x1d, 0xd4, 0xaa, 0xbb,
	0xce, 0x65, 0xec, 0x7e, 0x03, 0x00, 0x00, 0xff, 0xff, 0x65, 0x7f, 0xdb, 0x60, 0x1b, 0x01, 0x00,
	0x00,
}
